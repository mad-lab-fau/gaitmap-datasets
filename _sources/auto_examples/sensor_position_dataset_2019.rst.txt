
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sensor_position_dataset_2019.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_sensor_position_dataset_2019.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sensor_position_dataset_2019.py:


SensorPositionDataset2019 - Full mocap reference data set with 6 sensors per foot
=================================================================================

We provide 2 versions of the dataset:

SensorPositionComparison2019Segmentation: In this dataset no Mocap ground truth is provided and the IMU data is not cut to
    the individual gait test, but just a single recording for all participants exists with all tests (including
    failed ones) and movement between the tests.
    This can be used for stride segmentation tasks, as we hand-labeled all stride-start-end events in these recordings
SensorPositionComparison2019Mocap: In this dataset the data is cut into the individual tests.
    This means 7 data segments exist per participants.
    For each of these segments full synchronised motion capture reference is provided.

For more information about the dataset, see the dataset [documentation](https://zenodo.org/record/5747173)

.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. warning:: For this example to work, you need to modify the dataset path in the following line to point to the
             location of the data on your machine.

.. GENERATED FROM PYTHON SOURCE LINES 20-27

.. code-block:: default

    from pathlib import Path

    dataset_path = Path(
        "/home/arne/Documents/repos/work/projects/sensor_position_comparison" "/sensor_position_main_analysis/data/raw"
    )









.. GENERATED FROM PYTHON SOURCE LINES 28-37

SensorPositionComparison2019Segmentation
=================================
This version of the dataset contains one recording per participant with all tests and movement between the tests.
No Mocap reference is provided, but just the IMU data and the stride borders based on the IMU data.

By default, the data of all sensors is provided and the data for each sensor is aligned based on the roughly known
orientation of the sensor, so that the coordinate system of the insole sensor (see dataset documentation) can be
used for all sensors.


.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default

    from joblib import Memory

    from mad_datasets.sensor_position_comparison_2019 import SensorPositionComparison2019Segmentation

    dataset = SensorPositionComparison2019Segmentation(
        data_folder=dataset_path,
        memory=Memory("../.cache"),
    )
    dataset






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h4 style="margin-bottom: 0.1em;">SensorPositionComparison2019Segmentation [14 groups/rows]</h3>
    <div style="margin-top: 0em">
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table style="margin-left: 3em;">
      <thead>
        <tr style="text-align: right;">
          <th style="text-align: center;"></th>
          <th style="text-align: center;">participant</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th style="text-align: center;">0</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
        </tr>
        <tr>
          <th style="text-align: center;">1</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">5047</td>
        </tr>
        <tr>
          <th style="text-align: center;">2</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">5237</td>
        </tr>
        <tr>
          <th style="text-align: center;">3</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">54a9</td>
        </tr>
        <tr>
          <th style="text-align: center;">4</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">6dbe_2</td>
        </tr>
        <tr>
          <th style="text-align: center;">5</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">6e2e</td>
        </tr>
        <tr>
          <th style="text-align: center;">6</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">80b8</td>
        </tr>
        <tr>
          <th style="text-align: center;">7</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">8873</td>
        </tr>
        <tr>
          <th style="text-align: center;">8</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">8d60</td>
        </tr>
        <tr>
          <th style="text-align: center;">9</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">9b4b</td>
        </tr>
        <tr>
          <th style="text-align: center;">10</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">c9bb</td>
        </tr>
        <tr>
          <th style="text-align: center;">11</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">cb3d</td>
        </tr>
        <tr>
          <th style="text-align: center;">12</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">cdfc</td>
        </tr>
        <tr>
          <th style="text-align: center;">13</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">e54d</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 48-50

We can see that we have 14 participants.
Using the dataset class, we can select any subset of participants.

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    subset = dataset.get_subset(participant=["4d91", "5047"])
    subset






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h4 style="margin-bottom: 0.1em;">SensorPositionComparison2019Segmentation [2 groups/rows]</h3>
    <div style="margin-top: 0em">
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table style="margin-left: 3em;">
      <thead>
        <tr style="text-align: right;">
          <th style="text-align: center;"></th>
          <th style="text-align: center;">participant</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th style="text-align: center;">0</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
        </tr>
        <tr>
          <th style="text-align: center;">1</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">5047</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-56

Once we have the selection of data we want to work with, we can iterate the dataset object to access the data of
individual datapoints or just index it as below.

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    datapoint = subset[0]
    datapoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h4 style="margin-bottom: 0.1em;">SensorPositionComparison2019Segmentation [1 groups/rows]</h3>
    <div style="margin-top: 0em">
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table style="margin-left: 3em;">
      <thead>
        <tr style="text-align: right;">
          <th style="text-align: center;"></th>
          <th style="text-align: center;">participant</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th style="text-align: center;">0</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 60-62

On this datapoint, we can now access the data.
We will start with the metadata.

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    datapoint.metadata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'age': 28.0, 'bmi': 24.69, 'height': 180.0, 'imu_tests': {'fast_10': {'start': '2019-05-29T11:56:00.131836000', 'start_idx': 37914, 'stop': '2019-05-29T11:56:29.545898000', 'stop_idx': 43938}, 'fast_20': {'start': '2019-05-29T11:59:27.661132000', 'start_idx': 80416, 'stop': '2019-05-29T11:59:55.737304000', 'stop_idx': 86166}, 'long': {'start': '2019-05-29T12:00:19.760742000', 'start_idx': 91086, 'stop': '2019-05-29T12:05:26.264648000', 'stop_idx': 153858}, 'normal_10': {'start': '2019-05-29T11:53:28.408203000', 'start_idx': 6841, 'stop': '2019-05-29T11:54:12.934570000', 'stop_idx': 15960}, 'normal_20': {'start': '2019-05-29T11:57:03.544922000', 'start_idx': 50901, 'stop': '2019-05-29T11:57:38.671875000', 'stop_idx': 58095}, 'slow_10': {'start': '2019-05-29T11:54:38.159179000', 'start_idx': 21126, 'stop': '2019-05-29T11:55:34.155273000', 'stop_idx': 32594}, 'slow_20': {'start': '2019-05-29T11:58:09.355468000', 'start_idx': 64379, 'stop': '2019-05-29T11:59:03.520507000', 'stop_idx': 75472}}, 'mocap_test_start': {'fast_10': '2019-05-29, 13:55:57', 'fast_20': '2019-05-29, 13:59:24', 'long': '2019-05-29, 14:00:16', 'normal_10': '2019-05-29, 13:53:25', 'normal_20': '2019-05-29, 13:57:00', 'slow_10': '2019-05-29, 13:54:35', 'slow_20': '2019-05-29, 13:58:06'}, 'sensors': {'back': 'A515', 'l_ankle': 'E901', 'l_cavity': '9CA5', 'l_heel': '598E', 'l_insole': 'EFCC', 'l_instep': 'D60A', 'l_lateral': 'EB9E', 'l_medial': '5D89', 'r_ankle': 'C9FB', 'r_cavity': '9710', 'r_heel': '36BD', 'r_insole': '6807', 'r_instep': '922A', 'r_lateral': '0D14', 'r_medial': '220F', 'sync': '323C'}, 'sex': 'male', 'shoe_size': 42, 'weight': 80.0}



.. GENERATED FROM PYTHON SOURCE LINES 65-67

Next we can access the synchronised data of the individual sensors.
The data is stored as a multi-column pandas DataFrame with the time as index.

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default

    imu_data = datapoint.data
    imu_data.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="6" halign="left">back</th>
          <th colspan="6" halign="left">l_ankle</th>
          <th colspan="6" halign="left">l_cavity</th>
          <th colspan="6" halign="left">l_heel</th>
          <th colspan="6" halign="left">l_insole</th>
          <th colspan="6" halign="left">l_instep</th>
          <th colspan="6" halign="left">l_lateral</th>
          <th colspan="6" halign="left">l_medial</th>
          <th colspan="6" halign="left">r_ankle</th>
          <th colspan="6" halign="left">r_cavity</th>
          <th colspan="6" halign="left">r_heel</th>
          <th colspan="6" halign="left">r_insole</th>
          <th colspan="6" halign="left">r_instep</th>
          <th colspan="6" halign="left">r_lateral</th>
          <th colspan="6" halign="left">r_medial</th>
          <th>sync</th>
        </tr>
        <tr>
          <th></th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th>acc_x</th>
          <th>acc_y</th>
          <th>acc_z</th>
          <th>gyr_x</th>
          <th>gyr_y</th>
          <th>gyr_z</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.000000</th>
          <td>9.639655</td>
          <td>1.003389</td>
          <td>0.792358</td>
          <td>0.964769</td>
          <td>-4.226855</td>
          <td>1.145244</td>
          <td>9.616028</td>
          <td>1.097543</td>
          <td>0.580359</td>
          <td>8.893348</td>
          <td>1.039582</td>
          <td>-1.149213</td>
          <td>-0.478280</td>
          <td>0.495052</td>
          <td>9.670171</td>
          <td>0.486887</td>
          <td>-2.350048</td>
          <td>9.478837</td>
          <td>-2.798397</td>
          <td>1.174054</td>
          <td>9.245719</td>
          <td>-2.238035</td>
          <td>-1.056516</td>
          <td>8.550122</td>
          <td>-1.012983</td>
          <td>0.107313</td>
          <td>9.697630</td>
          <td>-0.489173</td>
          <td>-3.509086</td>
          <td>9.284385</td>
          <td>-5.138431</td>
          <td>-0.283704</td>
          <td>8.277701</td>
          <td>-3.924461</td>
          <td>-3.198059</td>
          <td>8.274648</td>
          <td>-1.584041</td>
          <td>2.358008</td>
          <td>9.093908</td>
          <td>-1.885105</td>
          <td>-0.843765</td>
          <td>9.354360</td>
          <td>-1.313708</td>
          <td>0.462278</td>
          <td>9.647076</td>
          <td>1.090911</td>
          <td>-2.628315</td>
          <td>9.487558</td>
          <td>9.655968</td>
          <td>-0.533029</td>
          <td>-1.641668</td>
          <td>0.064293</td>
          <td>-0.995854</td>
          <td>-0.119135</td>
          <td>-0.195298</td>
          <td>-0.296407</td>
          <td>9.780394</td>
          <td>0.342168</td>
          <td>-0.107218</td>
          <td>-0.237374</td>
          <td>-3.329367</td>
          <td>-0.335009</td>
          <td>9.173181</td>
          <td>-0.171504</td>
          <td>0.083816</td>
          <td>-0.619364</td>
          <td>-1.680654</td>
          <td>0.531686</td>
          <td>9.628885</td>
          <td>-0.029296</td>
          <td>0.536366</td>
          <td>-0.144435</td>
          <td>-5.199548</td>
          <td>0.209451</td>
          <td>8.330069</td>
          <td>0.010661</td>
          <td>-0.056726</td>
          <td>-0.213001</td>
          <td>-0.485401</td>
          <td>-1.077195</td>
          <td>9.734632</td>
          <td>0.700920</td>
          <td>0.381665</td>
          <td>0.026233</td>
          <td>-2.454875</td>
          <td>0.861965</td>
          <td>9.510098</td>
          <td>-0.609000</td>
          <td>0.054679</td>
          <td>-0.377781</td>
          <td>229.0</td>
        </tr>
        <tr>
          <th>0.004883</th>
          <td>9.658913</td>
          <td>0.979582</td>
          <td>0.797465</td>
          <td>1.263272</td>
          <td>-3.808572</td>
          <td>0.522217</td>
          <td>9.592170</td>
          <td>1.025593</td>
          <td>0.604017</td>
          <td>9.011317</td>
          <td>1.163295</td>
          <td>-0.720290</td>
          <td>-0.525866</td>
          <td>0.472277</td>
          <td>9.593322</td>
          <td>-0.229196</td>
          <td>-2.149277</td>
          <td>9.353990</td>
          <td>-2.893315</td>
          <td>1.141313</td>
          <td>9.227531</td>
          <td>-2.227447</td>
          <td>-1.059012</td>
          <td>9.090357</td>
          <td>-1.131958</td>
          <td>0.015675</td>
          <td>9.578977</td>
          <td>-1.346035</td>
          <td>-3.336291</td>
          <td>9.280680</td>
          <td>-5.047247</td>
          <td>-0.242298</td>
          <td>8.443387</td>
          <td>-4.221019</td>
          <td>-3.006924</td>
          <td>8.032200</td>
          <td>-1.466738</td>
          <td>2.326298</td>
          <td>9.324606</td>
          <td>-2.683556</td>
          <td>-0.657678</td>
          <td>8.923062</td>
          <td>-1.320010</td>
          <td>0.542008</td>
          <td>9.675786</td>
          <td>0.353176</td>
          <td>-2.458574</td>
          <td>9.013681</td>
          <td>9.636703</td>
          <td>-0.470721</td>
          <td>-1.679168</td>
          <td>0.122383</td>
          <td>-0.996680</td>
          <td>-0.242096</td>
          <td>-0.194860</td>
          <td>-0.267221</td>
          <td>9.836840</td>
          <td>0.098813</td>
          <td>0.074041</td>
          <td>-0.237625</td>
          <td>-3.361520</td>
          <td>-0.478899</td>
          <td>9.229526</td>
          <td>0.133922</td>
          <td>0.145733</td>
          <td>-0.682751</td>
          <td>-1.629357</td>
          <td>0.496934</td>
          <td>9.557363</td>
          <td>0.025199</td>
          <td>0.051991</td>
          <td>-0.020901</td>
          <td>-5.204463</td>
          <td>0.185407</td>
          <td>8.287773</td>
          <td>0.245606</td>
          <td>-0.123868</td>
          <td>0.092788</td>
          <td>-0.523744</td>
          <td>-1.062473</td>
          <td>9.772863</td>
          <td>0.142299</td>
          <td>-0.232900</td>
          <td>-0.442393</td>
          <td>-2.435560</td>
          <td>0.809754</td>
          <td>9.552935</td>
          <td>-0.239553</td>
          <td>0.174794</td>
          <td>-0.256035</td>
          <td>229.0</td>
        </tr>
        <tr>
          <th>0.009766</th>
          <td>9.644721</td>
          <td>0.941690</td>
          <td>0.817528</td>
          <td>1.448687</td>
          <td>-4.308459</td>
          <td>-0.258831</td>
          <td>9.710810</td>
          <td>1.059832</td>
          <td>0.632045</td>
          <td>8.412018</td>
          <td>1.347793</td>
          <td>-0.906480</td>
          <td>-0.349521</td>
          <td>0.493113</td>
          <td>9.724612</td>
          <td>0.246885</td>
          <td>-2.344160</td>
          <td>9.354793</td>
          <td>-2.847745</td>
          <td>1.106559</td>
          <td>9.346008</td>
          <td>-2.667794</td>
          <td>-1.175937</td>
          <td>8.375414</td>
          <td>-1.099034</td>
          <td>0.097475</td>
          <td>9.659951</td>
          <td>-0.982458</td>
          <td>-3.333560</td>
          <td>8.977136</td>
          <td>-5.047621</td>
          <td>-0.184963</td>
          <td>8.406099</td>
          <td>-4.044298</td>
          <td>-2.882318</td>
          <td>7.787892</td>
          <td>-1.578492</td>
          <td>2.385069</td>
          <td>9.448548</td>
          <td>-2.378515</td>
          <td>-0.843877</td>
          <td>9.225552</td>
          <td>-1.352227</td>
          <td>0.484959</td>
          <td>9.661543</td>
          <td>0.227079</td>
          <td>-2.277953</td>
          <td>9.132425</td>
          <td>9.603264</td>
          <td>-0.585479</td>
          <td>-1.644957</td>
          <td>0.055563</td>
          <td>-1.179022</td>
          <td>-0.423820</td>
          <td>-0.218909</td>
          <td>-0.257937</td>
          <td>9.832040</td>
          <td>0.166820</td>
          <td>-0.292649</td>
          <td>0.012160</td>
          <td>-3.347421</td>
          <td>-0.340068</td>
          <td>9.211550</td>
          <td>0.195143</td>
          <td>0.391584</td>
          <td>-0.740335</td>
          <td>-1.601073</td>
          <td>0.486773</td>
          <td>9.533437</td>
          <td>0.266061</td>
          <td>-0.254717</td>
          <td>-0.143613</td>
          <td>-5.199455</td>
          <td>0.214274</td>
          <td>8.400605</td>
          <td>0.308364</td>
          <td>0.126203</td>
          <td>-0.030605</td>
          <td>-0.480560</td>
          <td>-1.067600</td>
          <td>9.749025</td>
          <td>0.578217</td>
          <td>-0.231504</td>
          <td>0.027214</td>
          <td>-2.382656</td>
          <td>0.847593</td>
          <td>9.533862</td>
          <td>-0.424711</td>
          <td>0.174321</td>
          <td>-0.136325</td>
          <td>229.0</td>
        </tr>
        <tr>
          <th>0.014648</th>
          <td>9.644446</td>
          <td>0.970887</td>
          <td>0.855183</td>
          <td>1.448176</td>
          <td>-4.482166</td>
          <td>0.417053</td>
          <td>9.634935</td>
          <td>1.121579</td>
          <td>0.589781</td>
          <td>9.071769</td>
          <td>0.670671</td>
          <td>-1.025639</td>
          <td>-0.454468</td>
          <td>0.466338</td>
          <td>9.637213</td>
          <td>0.553151</td>
          <td>-2.225334</td>
          <td>8.928221</td>
          <td>-3.013602</td>
          <td>1.232312</td>
          <td>9.292753</td>
          <td>-1.704833</td>
          <td>-1.421502</td>
          <td>7.939957</td>
          <td>-1.103957</td>
          <td>0.126482</td>
          <td>9.721759</td>
          <td>-1.231116</td>
          <td>-2.913909</td>
          <td>8.974175</td>
          <td>-4.904418</td>
          <td>-0.373580</td>
          <td>8.216127</td>
          <td>-3.870531</td>
          <td>-3.443963</td>
          <td>7.843597</td>
          <td>-1.518045</td>
          <td>2.347116</td>
          <td>9.195006</td>
          <td>-2.432015</td>
          <td>-0.654928</td>
          <td>8.748984</td>
          <td>-1.361561</td>
          <td>0.475349</td>
          <td>9.661571</td>
          <td>0.532298</td>
          <td>-2.148109</td>
          <td>8.712761</td>
          <td>9.613208</td>
          <td>-0.609454</td>
          <td>-1.607167</td>
          <td>-0.131440</td>
          <td>-1.727433</td>
          <td>-0.237600</td>
          <td>-0.228618</td>
          <td>-0.248485</td>
          <td>9.827244</td>
          <td>-0.081777</td>
          <td>0.071465</td>
          <td>-0.236178</td>
          <td>-3.316683</td>
          <td>-0.482910</td>
          <td>9.123911</td>
          <td>0.197406</td>
          <td>0.205761</td>
          <td>-0.563970</td>
          <td>-1.657266</td>
          <td>0.497896</td>
          <td>9.638724</td>
          <td>0.457502</td>
          <td>0.227155</td>
          <td>-0.086887</td>
          <td>-5.223509</td>
          <td>0.257579</td>
          <td>8.301641</td>
          <td>0.369600</td>
          <td>0.250148</td>
          <td>0.091517</td>
          <td>-0.475689</td>
          <td>-1.057406</td>
          <td>9.797073</td>
          <td>0.455013</td>
          <td>0.139391</td>
          <td>0.265228</td>
          <td>-2.353629</td>
          <td>0.771404</td>
          <td>9.614875</td>
          <td>-0.363227</td>
          <td>0.050310</td>
          <td>-0.016760</td>
          <td>229.0</td>
        </tr>
        <tr>
          <th>0.019531</th>
          <td>9.759649</td>
          <td>0.913256</td>
          <td>0.836195</td>
          <td>1.265814</td>
          <td>-4.173974</td>
          <td>0.593066</td>
          <td>9.616217</td>
          <td>1.126282</td>
          <td>0.552007</td>
          <td>8.112835</td>
          <td>0.793633</td>
          <td>-1.335435</td>
          <td>-0.469232</td>
          <td>0.442467</td>
          <td>9.665183</td>
          <td>0.125151</td>
          <td>-2.403567</td>
          <td>9.476217</td>
          <td>-2.761227</td>
          <td>1.129461</td>
          <td>9.402465</td>
          <td>-2.487435</td>
          <td>-1.298131</td>
          <td>8.311991</td>
          <td>-1.089331</td>
          <td>0.058657</td>
          <td>9.545938</td>
          <td>-0.860304</td>
          <td>-3.332403</td>
          <td>8.977536</td>
          <td>-5.037178</td>
          <td>-0.323512</td>
          <td>8.494659</td>
          <td>-4.407556</td>
          <td>-3.497591</td>
          <td>7.354362</td>
          <td>-1.454504</td>
          <td>2.318448</td>
          <td>9.516196</td>
          <td>-2.678787</td>
          <td>-0.655022</td>
          <td>8.684410</td>
          <td>-1.427903</td>
          <td>0.459928</td>
          <td>9.661788</td>
          <td>0.477007</td>
          <td>-2.454248</td>
          <td>8.416942</td>
          <td>9.666087</td>
          <td>-0.523495</td>
          <td>-1.603864</td>
          <td>-0.622239</td>
          <td>-2.147860</td>
          <td>-0.228380</td>
          <td>-0.286172</td>
          <td>-0.254087</td>
          <td>9.808381</td>
          <td>-0.259506</td>
          <td>0.070568</td>
          <td>0.011377</td>
          <td>-3.298001</td>
          <td>-0.517798</td>
          <td>9.285508</td>
          <td>-0.804771</td>
          <td>0.182991</td>
          <td>1.712054</td>
          <td>-1.619186</td>
          <td>0.530274</td>
          <td>9.556883</td>
          <td>0.208960</td>
          <td>-0.009893</td>
          <td>0.221172</td>
          <td>-5.228498</td>
          <td>0.209488</td>
          <td>8.245288</td>
          <td>0.130432</td>
          <td>0.002707</td>
          <td>0.215289</td>
          <td>-0.509365</td>
          <td>-1.080655</td>
          <td>9.801870</td>
          <td>0.516753</td>
          <td>-0.107439</td>
          <td>0.146249</td>
          <td>-2.445217</td>
          <td>0.842934</td>
          <td>9.529151</td>
          <td>0.007138</td>
          <td>0.112506</td>
          <td>-0.255844</td>
          <td>229.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 71-76

Finally, we provide hand-labeled stride borders for the IMU data.
All strides are labeled based on the minima in the gyr_ml signal (see dataset documentation for more details).

Note that we use a trailing `_` to indicate that this is data calculated based on the ground truth/manual labels and
not just the IMU data.

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default

    segmented_stride_labels = datapoint.segmented_stride_list_["left"]
    segmented_stride_labels.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>426</th>
          <td>1907</td>
          <td>2145</td>
        </tr>
        <tr>
          <th>427</th>
          <td>2145</td>
          <td>2373</td>
        </tr>
        <tr>
          <th>428</th>
          <td>2373</td>
          <td>2598</td>
        </tr>
        <tr>
          <th>429</th>
          <td>2598</td>
          <td>2824</td>
        </tr>
        <tr>
          <th>430</th>
          <td>2824</td>
          <td>3053</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 80-83

Alternatively to the `segmented_stride_list_` we also provide the `segmented_stride_list_per_sensor_` makes it
easier to directly access the stride borders for a specific sensor (note they are still the same, as before,
as only one stridelist per foot exists).

.. GENERATED FROM PYTHON SOURCE LINES 83-87

.. code-block:: default

    segmented_stride_labels = datapoint.segmented_stride_list_per_sensor_["l_insole"]
    segmented_stride_labels.head()







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>426</th>
          <td>1907</td>
          <td>2145</td>
        </tr>
        <tr>
          <th>427</th>
          <td>2145</td>
          <td>2373</td>
        </tr>
        <tr>
          <th>428</th>
          <td>2373</td>
          <td>2598</td>
        </tr>
        <tr>
          <th>429</th>
          <td>2598</td>
          <td>2824</td>
        </tr>
        <tr>
          <th>430</th>
          <td>2824</td>
          <td>3053</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 88-89

Below we plot the IMU data (acc on top, gyro on bottom) and the stride borders for a small part of the data.

.. GENERATED FROM PYTHON SOURCE LINES 89-104

.. code-block:: default

    import matplotlib.pyplot as plt

    sensor = "l_insole"
    fig, axes = plt.subplots(2, 1, sharex=True, figsize=(10, 5))
    imu_data[sensor].filter(like="gyr").plot(ax=axes[0])
    imu_data[sensor].filter(like="acc").plot(ax=axes[1])
    for (i, s) in datapoint.segmented_stride_list_["left"].iterrows():
        s /= datapoint.sampling_rate_hz
        axes[0].axvspan(s["start"], s["end"], alpha=0.2, color="C1")
        axes[1].axvspan(s["start"], s["end"], alpha=0.2, color="C1")

    axes[0].set_xlim(300, 350)
    fig.tight_layout()
    fig.show()




.. image-sg:: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_001.png
   :alt: sensor position dataset 2019
   :srcset: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-114

SensorPositionComparison2019Mocap
==========================
For this version of the dataset, the data is split into the individual tests.
This means 7 data segments exist per participants.
For details about the respective tests, see the dataset documentation.

For each of these segments full synchronised motion capture trajectory of all markers is provided.
Further, we provide labels for IC and TC derived from the motion capture data for each of the hand labeled strides
within the segments.

.. GENERATED FROM PYTHON SOURCE LINES 114-122

.. code-block:: default

    from mad_datasets.sensor_position_comparison_2019 import SensorPositionComparison2019Mocap

    dataset = SensorPositionComparison2019Mocap(
        data_folder=dataset_path,
        memory=Memory("../.cache"),
    )
    dataset






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h4 style="margin-bottom: 0.1em;">SensorPositionComparison2019Mocap [98 groups/rows]</h3>
    <div style="margin-top: 0em">
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table style="margin-left: 3em;">
      <thead>
        <tr style="text-align: right;">
          <th style="text-align: center;"></th>
          <th style="text-align: center;">participant</th>
          <th style="text-align: center;">test</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th style="text-align: center;">0</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">fast_10</td>
        </tr>
        <tr>
          <th style="text-align: center;">1</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">fast_20</td>
        </tr>
        <tr>
          <th style="text-align: center;">2</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">long</td>
        </tr>
        <tr>
          <th style="text-align: center;">3</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">normal_10</td>
        </tr>
        <tr>
          <th style="text-align: center;">4</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">normal_20</td>
        </tr>
        <tr>
          <th style="text-align: center;">...</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">...</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">...</td>
        </tr>
        <tr>
          <th style="text-align: center;">93</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">e54d</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">long</td>
        </tr>
        <tr>
          <th style="text-align: center;">94</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">e54d</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">normal_10</td>
        </tr>
        <tr>
          <th style="text-align: center;">95</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">e54d</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">normal_20</td>
        </tr>
        <tr>
          <th style="text-align: center;">96</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">e54d</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">slow_10</td>
        </tr>
        <tr>
          <th style="text-align: center;">97</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">e54d</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">slow_20</td>
        </tr>
      </tbody>
    </table>
    <p>98 rows × 2 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 123-124

We can see that one individual data point for this dataset is only one of the gaittests.

.. GENERATED FROM PYTHON SOURCE LINES 124-127

.. code-block:: default

    datapoint = dataset[0]
    datapoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <h4 style="margin-bottom: 0.1em;">SensorPositionComparison2019Mocap [1 groups/rows]</h3>
    <div style="margin-top: 0em">
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table style="margin-left: 3em;">
      <thead>
        <tr style="text-align: right;">
          <th style="text-align: center;"></th>
          <th style="text-align: center;">participant</th>
          <th style="text-align: center;">test</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th style="text-align: center;">0</th>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">4d91</td>
          <td style="text-align: center; padding-left: 2em; padding-right: 2em;">fast_10</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 128-131

We can access the entire trajectory of the motion capture markers for this segment.
Note, that we don't provide any mocap-derived ground truth for any spatial parameters, but assume that they will be
calculated from the trajectory depending on the task.

.. GENERATED FROM PYTHON SOURCE LINES 131-135

.. code-block:: default

    imu_data = datapoint.data
    mocap_traj = datapoint.marker_position_
    mocap_traj.head()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ________________________________________________________________________________
    [Memory] Calling mad_datasets.sensor_position_comparison_2019.helper.get_mocap_test...
    get_mocap_test('4d91', 'fast_10', data_folder=PosixPath('/home/arne/Documents/repos/work/projects/sensor_position_comparison/sensor_position_main_analysis/data/raw'))
    /home/arne/Documents/repos/private/mad-datasets/.venv/lib/python3.8/site-packages/c3d/c3d.py:1219: UserWarning: No analog data found in file.
      warnings.warn('No analog data found in file.')
    ___________________________________________________get_mocap_test - 0.2s, 0.0min


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead tr th {
            text-align: left;
        }

        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th colspan="3" halign="left">l_fcc</th>
          <th colspan="3" halign="left">r_fcc</th>
          <th colspan="3" halign="left">l_toe</th>
          <th colspan="3" halign="left">r_toe</th>
          <th colspan="3" halign="left">l_fm5</th>
          <th colspan="3" halign="left">l_fm1</th>
          <th colspan="3" halign="left">r_fm1</th>
          <th colspan="3" halign="left">r_fm5</th>
          <th colspan="3" halign="left">l5</th>
          <th colspan="3" halign="left">l_ias</th>
          <th colspan="3" halign="left">r_ias</th>
        </tr>
        <tr>
          <th></th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
        </tr>
        <tr>
          <th>time after start [s]</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.00</th>
          <td>33188.285156</td>
          <td>11408.942383</td>
          <td>37.959297</td>
          <td>33201.906250</td>
          <td>11528.133789</td>
          <td>38.243458</td>
          <td>32917.382812</td>
          <td>11357.433594</td>
          <td>54.776230</td>
          <td>32933.617188</td>
          <td>11550.322266</td>
          <td>56.873981</td>
          <td>32974.257812</td>
          <td>11329.062500</td>
          <td>48.930309</td>
          <td>32957.886719</td>
          <td>11409.232422</td>
          <td>51.246918</td>
          <td>32970.824219</td>
          <td>11519.496094</td>
          <td>54.073757</td>
          <td>32994.425781</td>
          <td>11596.014648</td>
          <td>48.776993</td>
          <td>33159.937500</td>
          <td>11451.368164</td>
          <td>1046.660156</td>
          <td>32972.011719</td>
          <td>11333.251953</td>
          <td>1027.095947</td>
          <td>32978.550781</td>
          <td>11586.586914</td>
          <td>1021.398132</td>
        </tr>
        <tr>
          <th>0.01</th>
          <td>33188.253906</td>
          <td>11408.989258</td>
          <td>37.928055</td>
          <td>33201.886719</td>
          <td>11528.160156</td>
          <td>38.259876</td>
          <td>32917.343750</td>
          <td>11358.250000</td>
          <td>55.674366</td>
          <td>32933.585938</td>
          <td>11550.290039</td>
          <td>56.908909</td>
          <td>32974.261719</td>
          <td>11329.080078</td>
          <td>48.940609</td>
          <td>32957.941406</td>
          <td>11409.199219</td>
          <td>51.245342</td>
          <td>32970.863281</td>
          <td>11519.357422</td>
          <td>54.199982</td>
          <td>32994.402344</td>
          <td>11596.022461</td>
          <td>48.769718</td>
          <td>33159.855469</td>
          <td>11451.330078</td>
          <td>1046.640259</td>
          <td>32971.906250</td>
          <td>11333.131836</td>
          <td>1027.082275</td>
          <td>32978.527344</td>
          <td>11586.610352</td>
          <td>1021.471680</td>
        </tr>
        <tr>
          <th>0.02</th>
          <td>33188.269531</td>
          <td>11408.986328</td>
          <td>37.973907</td>
          <td>33201.902344</td>
          <td>11528.151367</td>
          <td>38.310471</td>
          <td>32917.410156</td>
          <td>11357.396484</td>
          <td>54.874348</td>
          <td>32933.597656</td>
          <td>11550.280273</td>
          <td>56.861053</td>
          <td>32974.265625</td>
          <td>11329.083984</td>
          <td>48.958572</td>
          <td>32957.933594</td>
          <td>11409.244141</td>
          <td>51.260571</td>
          <td>32970.863281</td>
          <td>11519.273438</td>
          <td>54.224525</td>
          <td>32994.402344</td>
          <td>11596.002930</td>
          <td>48.777275</td>
          <td>33159.750000</td>
          <td>11451.270508</td>
          <td>1046.694214</td>
          <td>32971.832031</td>
          <td>11333.096680</td>
          <td>1027.076294</td>
          <td>32978.492188</td>
          <td>11586.694336</td>
          <td>1021.514526</td>
        </tr>
        <tr>
          <th>0.03</th>
          <td>33188.250000</td>
          <td>11409.005859</td>
          <td>38.016975</td>
          <td>33201.875000</td>
          <td>11528.157227</td>
          <td>38.336349</td>
          <td>32917.308594</td>
          <td>11358.207031</td>
          <td>55.747540</td>
          <td>32932.625000</td>
          <td>11549.203125</td>
          <td>54.873703</td>
          <td>32974.175781</td>
          <td>11329.082031</td>
          <td>49.010422</td>
          <td>32957.902344</td>
          <td>11409.237305</td>
          <td>51.279572</td>
          <td>32970.785156</td>
          <td>11519.296875</td>
          <td>54.214439</td>
          <td>32994.390625</td>
          <td>11596.045898</td>
          <td>48.860897</td>
          <td>33159.664062</td>
          <td>11451.238281</td>
          <td>1046.714233</td>
          <td>32971.769531</td>
          <td>11333.050781</td>
          <td>1027.098877</td>
          <td>32978.402344</td>
          <td>11586.411133</td>
          <td>1021.418457</td>
        </tr>
        <tr>
          <th>0.04</th>
          <td>33188.222656</td>
          <td>11408.929688</td>
          <td>38.047321</td>
          <td>33201.878906</td>
          <td>11528.140625</td>
          <td>38.333698</td>
          <td>32917.363281</td>
          <td>11358.142578</td>
          <td>55.821022</td>
          <td>32932.652344</td>
          <td>11549.142578</td>
          <td>54.953033</td>
          <td>32974.187500</td>
          <td>11329.026367</td>
          <td>49.040100</td>
          <td>32957.929688</td>
          <td>11409.175781</td>
          <td>51.334732</td>
          <td>32970.800781</td>
          <td>11519.185547</td>
          <td>54.317780</td>
          <td>32994.437500</td>
          <td>11596.020508</td>
          <td>48.867943</td>
          <td>33159.636719</td>
          <td>11451.153320</td>
          <td>1046.795898</td>
          <td>32971.656250</td>
          <td>11333.028320</td>
          <td>1027.109253</td>
          <td>32978.238281</td>
          <td>11586.364258</td>
          <td>1021.336426</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 136-144

We plot the data of the heel marker (fcc) and the imu data of the insole sensor together to show that they are
synchronised.
Both data streams have the correct time axis, even though they are sampled at different rates (mocap is sampled
with 100 hz, and IMU with 204.8).
Keep that in mind, when working with the data without an index (e.g. after converting to numpy arrays).

To better visualize the data we "normalize" the mocap data by subtracting the first position.
This way we can clearly see the individual strides.

.. GENERATED FROM PYTHON SOURCE LINES 144-153

.. code-block:: default

    fig, axes = plt.subplots(2, 1, sharex=True, figsize=(10, 5))
    imu_data["l_insole"].filter(like="gyr").plot(ax=axes[0])
    mocap_traj["l_fcc"].sub(mocap_traj["l_fcc"].iloc[0]).plot(ax=axes[1])
    axes[0].set_xlim(0, 7.5)
    axes[0].set_ylabel("IMU gyr [rad/s]")
    axes[1].set_ylabel("Marker Trajectory [mm]")
    fig.tight_layout()
    fig.show()




.. image-sg:: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_002.png
   :alt: sensor position dataset 2019
   :srcset: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 154-155

Like before we have access to the segmented strides (however, only cut for the respective region).

.. GENERATED FROM PYTHON SOURCE LINES 155-158

.. code-block:: default

    segmented_stride_labels = datapoint.segmented_stride_list_["left"]
    segmented_stride_labels.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>347</td>
          <td>547</td>
        </tr>
        <tr>
          <th>491</th>
          <td>547</td>
          <td>739</td>
        </tr>
        <tr>
          <th>492</th>
          <td>739</td>
          <td>934</td>
        </tr>
        <tr>
          <th>493</th>
          <td>934</td>
          <td>1133</td>
        </tr>
        <tr>
          <th>494</th>
          <td>1133</td>
          <td>1363</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 159-164

We can also access the labels for IC and TC.
Even though we used the hand labeled strides as regions of interest for segmentation, we can see that the start and
end labels of the mocap event strides and the hand labeled strides are not identical.
This is because the event list is provided in the samples of the motion capture data, while the hand labeled strides
are provided in the samples of the IMU data.

.. GENERATED FROM PYTHON SOURCE LINES 164-167

.. code-block:: default

    event_labels = datapoint.mocap_events_["left"]
    event_labels.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
          <th>ic</th>
          <th>tc</th>
          <th>min_vel</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>169</td>
          <td>267</td>
          <td>209</td>
          <td>174</td>
          <td>236</td>
        </tr>
        <tr>
          <th>491</th>
          <td>267</td>
          <td>360</td>
          <td>306</td>
          <td>272</td>
          <td>329</td>
        </tr>
        <tr>
          <th>492</th>
          <td>360</td>
          <td>456</td>
          <td>399</td>
          <td>366</td>
          <td>425</td>
        </tr>
        <tr>
          <th>493</th>
          <td>456</td>
          <td>553</td>
          <td>496</td>
          <td>461</td>
          <td>522</td>
        </tr>
        <tr>
          <th>494</th>
          <td>553</td>
          <td>665</td>
          <td>595</td>
          <td>558</td>
          <td>633</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 168-171

To avoid errors in potential conversions between the two domains (mocap/IMU), we provide the
`convert_with_padding` methods to convert the event list.
(To understand why the method is called `..._with_padding`, see the section below).

.. GENERATED FROM PYTHON SOURCE LINES 171-174

.. code-block:: default

    event_labels_in_imu = datapoint.convert_with_padding(event_labels, from_time_axis="mocap", to_time_axis="imu")
    event_labels_in_imu.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
          <th>ic</th>
          <th>tc</th>
          <th>min_vel</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>346</td>
          <td>547</td>
          <td>428</td>
          <td>356</td>
          <td>483</td>
        </tr>
        <tr>
          <th>491</th>
          <td>547</td>
          <td>737</td>
          <td>627</td>
          <td>557</td>
          <td>674</td>
        </tr>
        <tr>
          <th>492</th>
          <td>737</td>
          <td>934</td>
          <td>817</td>
          <td>750</td>
          <td>870</td>
        </tr>
        <tr>
          <th>493</th>
          <td>934</td>
          <td>1133</td>
          <td>1016</td>
          <td>944</td>
          <td>1069</td>
        </tr>
        <tr>
          <th>494</th>
          <td>1133</td>
          <td>1362</td>
          <td>1219</td>
          <td>1143</td>
          <td>1296</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 175-180

Now you can see, that the start and end labels are (almost) identical.
Remaining differences are due to rounding errors.
This is not ideal, but should not affect typical analysis.

Below we plotted the segmented strides and the IC and TC labels onto the gyr-y axis and the mocap z-axis (foot lift).

.. GENERATED FROM PYTHON SOURCE LINES 180-231

.. code-block:: default

    fig, axes = plt.subplots(2, 1, sharex=True, figsize=(10, 5))
    gyr_y = imu_data["l_insole"]["gyr_y"]
    norm_mocap_z = mocap_traj["l_fcc"].sub(mocap_traj["l_fcc"].iloc[0])["z"]
    gyr_y.plot(ax=axes[0])
    norm_mocap_z.plot(ax=axes[1])
    event_labels_in_mocap = event_labels
    event_labels_times = datapoint.convert_with_padding(event_labels, from_time_axis="mocap", to_time_axis="time")
    event_labels_in_imu = datapoint.convert_with_padding(event_labels, from_time_axis="mocap", to_time_axis="imu")
    for (i, s) in event_labels_times.iterrows():
        axes[0].axvspan(s["start"], s["end"], alpha=0.2, color="C1")
        axes[1].axvspan(s["start"], s["end"], alpha=0.2, color="C1")
    axes[0].scatter(
        event_labels_times["ic"],
        gyr_y.iloc[event_labels_in_imu["ic"]],
        marker="s",
        color="k",
        zorder=10,
        label="IC",
    )
    axes[0].scatter(
        event_labels_times["tc"],
        gyr_y.iloc[event_labels_in_imu["tc"]],
        marker="o",
        color="C3",
        zorder=10,
        label="TC",
    )
    axes[1].scatter(
        event_labels_times["ic"],
        norm_mocap_z.iloc[event_labels_in_mocap["ic"]],
        marker="s",
        color="k",
        zorder=10,
        label="IC",
    )
    axes[1].scatter(
        event_labels_times["tc"],
        norm_mocap_z.iloc[event_labels_in_mocap["tc"]],
        marker="o",
        color="C3",
        zorder=10,
        label="TC",
    )

    axes[0].legend()
    axes[0].set_xlim(0, 7.5)
    axes[0].set_ylabel("IMU gyr [rad/s]")
    axes[1].set_ylabel("Marker Trajectory [mm]")
    fig.tight_layout()
    fig.show()




.. image-sg:: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_003.png
   :alt: sensor position dataset 2019
   :srcset: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 232-243

Data padding
************
One issue that you might run into when working with the mocap version of the dataset is that the start of the test
(which is used to cut the signal) is right  at the beginning of the movement.
This means for algorithms that require a certain resting period (e.g. to do a gravity alignment) might not work well.
Therefore, we provide a `data_padding_s` parameter that will load that amount of seconds before and after the
actual test.

On the time axis, we assign negative time stamps to all the padded values that are before the actual test start.
This ensures that the time axis of the IMU data and the mocap data are still aligned, even tough no mocap data
exists in the padded region.

.. GENERATED FROM PYTHON SOURCE LINES 243-252

.. code-block:: default

    dataset = SensorPositionComparison2019Mocap(
        data_folder=dataset_path,
        memory=Memory("../.cache"),
        data_padding_s=3,
    )
    datapoint = dataset[0]
    imu_data = datapoint.data
    mocap_traj = datapoint.marker_position_








.. GENERATED FROM PYTHON SOURCE LINES 253-255

We can see that the data is now padded with 3 seconds before and after the test, however no mocap samples exist in
these regions.

.. GENERATED FROM PYTHON SOURCE LINES 255-263

.. code-block:: default

    fig, axes = plt.subplots(2, 1, sharex=True, figsize=(10, 5))
    imu_data["l_insole"].filter(like="gyr").plot(ax=axes[0])
    mocap_traj["l_fcc"].sub(mocap_traj["l_fcc"].iloc[0]).plot(ax=axes[1])
    axes[0].set_ylabel("IMU gyr [rad/s]")
    axes[1].set_ylabel("Marker Trajectory [mm]")
    fig.tight_layout()
    fig.show()




.. image-sg:: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_004.png
   :alt: sensor position dataset 2019
   :srcset: /auto_examples/images/sphx_glr_sensor_position_dataset_2019_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 264-268

While the time axis of the IMU data is still aligned with the mocap data, care needs to be taken when it comes to
the event data.
Only events/labels provided with IMU samples (or with a time axis) respect the padding correctly.
For example, the `segmented_stride_list` is provided with in IMU samples, so it is padded correctly.

.. GENERATED FROM PYTHON SOURCE LINES 268-271

.. code-block:: default

    segmented_stride_labels = datapoint.segmented_stride_list_["left"]
    segmented_stride_labels.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>961</td>
          <td>1161</td>
        </tr>
        <tr>
          <th>491</th>
          <td>1161</td>
          <td>1353</td>
        </tr>
        <tr>
          <th>492</th>
          <td>1353</td>
          <td>1548</td>
        </tr>
        <tr>
          <th>493</th>
          <td>1548</td>
          <td>1747</td>
        </tr>
        <tr>
          <th>494</th>
          <td>1747</td>
          <td>1977</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 272-274

However, to correctly transform it to the time domain, you need to manually add the padding time.
To avoid erros, we provide the `convert_with_padding` method that does this for you.

.. GENERATED FROM PYTHON SOURCE LINES 274-279

.. code-block:: default

    segmented_stride_labels_time = datapoint.convert_with_padding(
        segmented_stride_labels, from_time_axis="imu", to_time_axis="time"
    )
    segmented_stride_labels_time.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>1.692383</td>
          <td>2.668945</td>
        </tr>
        <tr>
          <th>491</th>
          <td>2.668945</td>
          <td>3.606445</td>
        </tr>
        <tr>
          <th>492</th>
          <td>3.606445</td>
          <td>4.558594</td>
        </tr>
        <tr>
          <th>493</th>
          <td>4.558594</td>
          <td>5.530273</td>
        </tr>
        <tr>
          <th>494</th>
          <td>5.530273</td>
          <td>6.653320</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 280-285

Values provided in mocap samples, don't have any padding applied.
However, for the like with the segmented_stride_list, you can use `convert_with_padding` to transform them to IMU
samples with correct padding.

First no padding, mocap samples

.. GENERATED FROM PYTHON SOURCE LINES 285-288

.. code-block:: default

    event_labels_in_mocap = datapoint.mocap_events_["left"]
    event_labels_in_mocap.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
          <th>ic</th>
          <th>tc</th>
          <th>min_vel</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>169</td>
          <td>267</td>
          <td>209</td>
          <td>174</td>
          <td>236</td>
        </tr>
        <tr>
          <th>491</th>
          <td>267</td>
          <td>360</td>
          <td>306</td>
          <td>272</td>
          <td>329</td>
        </tr>
        <tr>
          <th>492</th>
          <td>360</td>
          <td>456</td>
          <td>399</td>
          <td>366</td>
          <td>425</td>
        </tr>
        <tr>
          <th>493</th>
          <td>456</td>
          <td>553</td>
          <td>496</td>
          <td>461</td>
          <td>522</td>
        </tr>
        <tr>
          <th>494</th>
          <td>553</td>
          <td>665</td>
          <td>595</td>
          <td>558</td>
          <td>633</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 289-290

In IMU samples with padding:

.. GENERATED FROM PYTHON SOURCE LINES 290-293

.. code-block:: default

    event_labels_in_imu = datapoint.convert_with_padding(event_labels_in_mocap, from_time_axis="mocap", to_time_axis="imu")
    event_labels_in_imu.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
          <th>ic</th>
          <th>tc</th>
          <th>min_vel</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>960</td>
          <td>1161</td>
          <td>1042</td>
          <td>970</td>
          <td>1097</td>
        </tr>
        <tr>
          <th>491</th>
          <td>1161</td>
          <td>1351</td>
          <td>1241</td>
          <td>1171</td>
          <td>1288</td>
        </tr>
        <tr>
          <th>492</th>
          <td>1351</td>
          <td>1548</td>
          <td>1431</td>
          <td>1364</td>
          <td>1484</td>
        </tr>
        <tr>
          <th>493</th>
          <td>1548</td>
          <td>1747</td>
          <td>1630</td>
          <td>1558</td>
          <td>1683</td>
        </tr>
        <tr>
          <th>494</th>
          <td>1747</td>
          <td>1976</td>
          <td>1833</td>
          <td>1757</td>
          <td>1910</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 294-296

And in time (seconds) with padding:
Below you can see that the first event is now after 4 seconds, indicating that the signal is correctly padded.

.. GENERATED FROM PYTHON SOURCE LINES 296-298

.. code-block:: default

    event_labels_times = datapoint.convert_with_padding(event_labels_in_mocap, from_time_axis="mocap", to_time_axis="time")
    event_labels_times.head()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>end</th>
          <th>ic</th>
          <th>tc</th>
          <th>min_vel</th>
        </tr>
        <tr>
          <th>s_id</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>490</th>
          <td>4.69</td>
          <td>5.67</td>
          <td>5.09</td>
          <td>4.74</td>
          <td>5.36</td>
        </tr>
        <tr>
          <th>491</th>
          <td>5.67</td>
          <td>6.60</td>
          <td>6.06</td>
          <td>5.72</td>
          <td>6.29</td>
        </tr>
        <tr>
          <th>492</th>
          <td>6.60</td>
          <td>7.56</td>
          <td>6.99</td>
          <td>6.66</td>
          <td>7.25</td>
        </tr>
        <tr>
          <th>493</th>
          <td>7.56</td>
          <td>8.53</td>
          <td>7.96</td>
          <td>7.61</td>
          <td>8.22</td>
        </tr>
        <tr>
          <th>494</th>
          <td>8.53</td>
          <td>9.65</td>
          <td>8.95</td>
          <td>8.58</td>
          <td>9.33</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.692 seconds)

**Estimated memory usage:**  473 MB


.. _sphx_glr_download_auto_examples_sensor_position_dataset_2019.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: sensor_position_dataset_2019.py <sensor_position_dataset_2019.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: sensor_position_dataset_2019.ipynb <sensor_position_dataset_2019.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
